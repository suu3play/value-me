import React from 'react';
import {
  Typography,
  FormControl,
  InputLabel,
  OutlinedInput,
  InputAdornment,
  ToggleButton,
  ToggleButtonGroup,
  Box,
  FormControlLabel,
  Switch,
  Collapse,
  Paper,
  IconButton
} from '@mui/material';
import { KeyboardArrowUp, KeyboardArrowDown } from '@mui/icons-material';
import type { SalaryCalculationData } from '../types';

interface OptionsFormProps {
  data: SalaryCalculationData;
  onChange: (data: SalaryCalculationData) => void;
}

const OptionsForm: React.FC<OptionsFormProps> = ({ data, onChange }) => {
  const handleBenefitsToggle = (event: React.ChangeEvent<HTMLInputElement>) => {
    onChange({ ...data, enableBenefits: event.target.checked });
  };

  const handleWelfareTypeChange = (
    _: React.MouseEvent<HTMLElement>,
    newWelfareType: 'monthly' | 'annual' | null
  ) => {
    if (newWelfareType) {
      onChange({ ...data, welfareType: newWelfareType });
    }
  };

  const handleWelfareInputMethodChange = (
    _: React.MouseEvent<HTMLElement>,
    newMethod: 'total' | 'individual' | null
  ) => {
    if (newMethod) {
      onChange({ ...data, welfareInputMethod: newMethod });
    }
  };

  const handleWelfareAmountChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const value = parseInt(event.target.value) || 0;
    onChange({ ...data, welfareAmount: value });
  };

  const handleWelfareIncrease = () => {
    const increment = data.welfareType === 'monthly' ? 1000 : 10000;
    onChange({ ...data, welfareAmount: data.welfareAmount + increment });
  };

  const handleWelfareDecrease = () => {
    const decrement = data.welfareType === 'monthly' ? 1000 : 10000;
    const newAmount = Math.max(0, data.welfareAmount - decrement);
    onChange({ ...data, welfareAmount: newAmount });
  };

  const handleAllowanceChange = (field: keyof SalaryCalculationData) => (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    const value = parseInt(event.target.value) || 0;
    onChange({ ...data, [field]: value });
  };

  const handleAllowanceIncrease = (field: keyof SalaryCalculationData) => () => {
    const currentValue = data[field] as number;
    onChange({ ...data, [field]: currentValue + 1000 });
  };

  const handleAllowanceDecrease = (field: keyof SalaryCalculationData) => () => {
    const currentValue = data[field] as number;
    const newValue = Math.max(0, currentValue - 1000);
    onChange({ ...data, [field]: newValue });
  };

  const handleBonusChange = (field: keyof SalaryCalculationData) => (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    const value = parseInt(event.target.value) || 0;
    onChange({ ...data, [field]: value });
  };

  const handleBonusIncrease = (field: keyof SalaryCalculationData) => () => {
    const currentValue = data[field] as number;
    onChange({ ...data, [field]: currentValue + 10000 });
  };

  const handleBonusDecrease = (field: keyof SalaryCalculationData) => () => {
    const currentValue = data[field] as number;
    const newValue = Math.max(0, currentValue - 10000);
    onChange({ ...data, [field]: newValue });
  };

  return (
    <Box>
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
        <Typography variant="h5" sx={{ fontWeight: 'bold', mr: 2 }}>
          オプション機能
        </Typography>
        <FormControlLabel
          control={
            <Switch
              checked={data.enableBenefits}
              onChange={handleBenefitsToggle}
              color="primary"
            />
          }
          label="福利厚生や手当などを考慮して計算する"
        />
      </Box>

      <Collapse in={data.enableBenefits}>
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
          {/* 福利厚生 */}
          <Paper elevation={1} sx={{ p: 3, bgcolor: 'grey.50' }}>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
              {/* 福利厚生の会社負担額 */}
              <Box>
                <Typography variant="h6" gutterBottom>
                  福利厚生の会社負担額
                </Typography>
                <Box sx={{ mb: 2, display: 'flex', flexDirection: 'column', gap: 2 }}>
                  <Box>
                    <Typography variant="body2" sx={{ mb: 1 }}>入力方式</Typography>
                    <ToggleButtonGroup
                      value={data.welfareInputMethod}
                      exclusive
                      onChange={handleWelfareInputMethodChange}
                      aria-label="welfare input method"
                      size="small"
                      sx={{ mb: 1 }}
                    >
                      <ToggleButton value="total" aria-label="total">
                        全体額で入力
                      </ToggleButton>
                      <ToggleButton value="individual" aria-label="individual">
                        各種手当の合算
                      </ToggleButton>
                    </ToggleButtonGroup>
                  </Box>
                  {data.welfareInputMethod === 'total' && (
                    <Box>
                      <Typography variant="body2" sx={{ mb: 1 }}>時期</Typography>
                      <ToggleButtonGroup
                        value={data.welfareType}
                        exclusive
                        onChange={handleWelfareTypeChange}
                        aria-label="welfare type"
                        size="small"
                      >
                        <ToggleButton value="monthly" aria-label="monthly">
                          月額
                        </ToggleButton>
                        <ToggleButton value="annual" aria-label="annual">
                          年額
                        </ToggleButton>
                      </ToggleButtonGroup>
                    </Box>
                  )}
                </Box>
                {data.welfareInputMethod === 'total' && (
                  <FormControl fullWidth variant="outlined">
                    <InputLabel htmlFor="welfare-amount">
                      福利厚生の会社負担額（{data.welfareType === 'monthly' ? '月額' : '年額'}）
                    </InputLabel>
                    <OutlinedInput
                      id="welfare-amount"
                      type="number"
                      value={data.welfareAmount || ''}
                      onChange={handleWelfareAmountChange}
                      endAdornment={
                        <InputAdornment position="end">
                          <Box sx={{ display: 'flex', flexDirection: 'column', mr: 1 }}>
                            <IconButton
                              size="small"
                              onClick={handleWelfareIncrease}
                              sx={{ p: 0.2, height: 20 }}
                            >
                              <KeyboardArrowUp fontSize="small" />
                            </IconButton>
                            <IconButton
                              size="small"
                              onClick={handleWelfareDecrease}
                              sx={{ p: 0.2, height: 20 }}
                            >
                              <KeyboardArrowDown fontSize="small" />
                            </IconButton>
                          </Box>
                          円
                        </InputAdornment>
                      }
                      label={`福利厚生の会社負担額（${data.welfareType === 'monthly' ? '月額' : '年額'}）`}
                    />
                  </FormControl>
                )}
                {data.welfareInputMethod === 'individual' && (
                  <Box sx={{ p: 2, bgcolor: 'grey.100', borderRadius: 1, textAlign: 'center' }}>
                    <Typography variant="body2" color="textSecondary">
                      各種手当の合算で計算しています
                    </Typography>
                  </Box>
                )}
              </Box>

              {/* 各種手当 */}
              <Box>
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 1 }}>
                  <Typography variant="h6">
                    各種手当（月額）
                  </Typography>
                  {data.welfareInputMethod === 'individual' && (
                    <Box sx={{ p: 1, bgcolor: 'success.main', color: 'white', borderRadius: 1 }}>
                      <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                        合算額: {(
                          data.housingAllowance + 
                          data.regionalAllowance + 
                          data.familyAllowance + 
                          data.qualificationAllowance + 
                          data.otherAllowance
                        ).toLocaleString()}円/月
                      </Typography>
                    </Box>
                  )}
                </Box>
                {data.welfareInputMethod === 'individual' && (
                  <Typography variant="caption" color="textSecondary" sx={{ mb: 2, display: 'block' }}>
                    この合算額が福利厚生として計算されます
                  </Typography>
                )}
                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, opacity: data.welfareInputMethod === 'total' ? 0.5 : 1 }}>
                  <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
                    <FormControl sx={{ minWidth: 200, flex: 1 }} variant="outlined">
                      <InputLabel htmlFor="housing-allowance">住宅手当</InputLabel>
                      <OutlinedInput
                        id="housing-allowance"
                        type="number"
                        value={data.housingAllowance || ''}
                        onChange={handleAllowanceChange('housingAllowance')}
                        disabled={data.welfareInputMethod === 'total'}
                        endAdornment={
                          <InputAdornment position="end">
                            <Box sx={{ display: 'flex', flexDirection: 'column', mr: 1 }}>
                              <IconButton
                                size="small"
                                onClick={handleAllowanceIncrease('housingAllowance')}
                                sx={{ p: 0.2, height: 20 }}
                              >
                                <KeyboardArrowUp fontSize="small" />
                              </IconButton>
                              <IconButton
                                size="small"
                                onClick={handleAllowanceDecrease('housingAllowance')}
                                sx={{ p: 0.2, height: 20 }}
                              >
                                <KeyboardArrowDown fontSize="small" />
                              </IconButton>
                            </Box>
                            円
                          </InputAdornment>
                        }
                        label="住宅手当"
                      />
                    </FormControl>
                    <FormControl sx={{ minWidth: 200, flex: 1 }} variant="outlined">
                      <InputLabel htmlFor="regional-allowance">地域手当</InputLabel>
                      <OutlinedInput
                        id="regional-allowance"
                        type="number"
                        value={data.regionalAllowance || ''}
                        onChange={handleAllowanceChange('regionalAllowance')}
                        disabled={data.welfareInputMethod === 'total'}
                        endAdornment={
                          <InputAdornment position="end">
                            <Box sx={{ display: 'flex', flexDirection: 'column', mr: 1 }}>
                              <IconButton
                                size="small"
                                onClick={handleAllowanceIncrease('regionalAllowance')}
                                sx={{ p: 0.2, height: 20 }}
                              >
                                <KeyboardArrowUp fontSize="small" />
                              </IconButton>
                              <IconButton
                                size="small"
                                onClick={handleAllowanceDecrease('regionalAllowance')}
                                sx={{ p: 0.2, height: 20 }}
                              >
                                <KeyboardArrowDown fontSize="small" />
                              </IconButton>
                            </Box>
                            円
                          </InputAdornment>
                        }
                        label="地域手当"
                      />
                    </FormControl>
                  </Box>
                  <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
                    <FormControl sx={{ minWidth: 200, flex: 1 }} variant="outlined">
                      <InputLabel htmlFor="family-allowance">家族手当</InputLabel>
                      <OutlinedInput
                        id="family-allowance"
                        type="number"
                        value={data.familyAllowance || ''}
                        onChange={handleAllowanceChange('familyAllowance')}
                        disabled={data.welfareInputMethod === 'total'}
                        endAdornment={
                          <InputAdornment position="end">
                            <Box sx={{ display: 'flex', flexDirection: 'column', mr: 1 }}>
                              <IconButton
                                size="small"
                                onClick={handleAllowanceIncrease('familyAllowance')}
                                sx={{ p: 0.2, height: 20 }}
                              >
                                <KeyboardArrowUp fontSize="small" />
                              </IconButton>
                              <IconButton
                                size="small"
                                onClick={handleAllowanceDecrease('familyAllowance')}
                                sx={{ p: 0.2, height: 20 }}
                              >
                                <KeyboardArrowDown fontSize="small" />
                              </IconButton>
                            </Box>
                            円
                          </InputAdornment>
                        }
                        label="家族手当"
                      />
                    </FormControl>
                    <FormControl sx={{ minWidth: 200, flex: 1 }} variant="outlined">
                      <InputLabel htmlFor="other-allowance">その他手当</InputLabel>
                      <OutlinedInput
                        id="other-allowance"
                        type="number"
                        value={data.otherAllowance || ''}
                        onChange={handleAllowanceChange('otherAllowance')}
                        disabled={data.welfareInputMethod === 'total'}
                        endAdornment={
                          <InputAdornment position="end">
                            <Box sx={{ display: 'flex', flexDirection: 'column', mr: 1 }}>
                              <IconButton
                                size="small"
                                onClick={handleAllowanceIncrease('otherAllowance')}
                                sx={{ p: 0.2, height: 20 }}
                              >
                                <KeyboardArrowUp fontSize="small" />
                              </IconButton>
                              <IconButton
                                size="small"
                                onClick={handleAllowanceDecrease('otherAllowance')}
                                sx={{ p: 0.2, height: 20 }}
                              >
                                <KeyboardArrowDown fontSize="small" />
                              </IconButton>
                            </Box>
                            円
                          </InputAdornment>
                        }
                        label="その他手当"
                      />
                    </FormControl>
                  </Box>
                  <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
                    <FormControl sx={{ minWidth: 200, flex: 1 }} variant="outlined">
                      <InputLabel htmlFor="qualification-allowance">資格手当</InputLabel>
                      <OutlinedInput
                        id="qualification-allowance"
                        type="number"
                        value={data.qualificationAllowance || ''}
                        onChange={handleAllowanceChange('qualificationAllowance')}
                        disabled={data.welfareInputMethod === 'total'}
                        endAdornment={
                          <InputAdornment position="end">
                            <Box sx={{ display: 'flex', flexDirection: 'column', mr: 1 }}>
                              <IconButton
                                size="small"
                                onClick={handleAllowanceIncrease('qualificationAllowance')}
                                sx={{ p: 0.2, height: 20 }}
                              >
                                <KeyboardArrowUp fontSize="small" />
                              </IconButton>
                              <IconButton
                                size="small"
                                onClick={handleAllowanceDecrease('qualificationAllowance')}
                                sx={{ p: 0.2, height: 20 }}
                              >
                                <KeyboardArrowDown fontSize="small" />
                              </IconButton>
                            </Box>
                            円
                          </InputAdornment>
                        }
                        label="資格手当"
                      />
                    </FormControl>
                  </Box>
                </Box>
              </Box>
          </Paper>

          {/* ボーナス */}
          <Paper elevation={1} sx={{ p: 3, bgcolor: 'grey.50' }}>
            <Box>
              <Typography variant="h6" gutterBottom>
                ボーナス（年額）
              </Typography>
              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
                  <FormControl sx={{ minWidth: 200, flex: 1 }} variant="outlined">
                    <InputLabel htmlFor="summer-bonus">夏期賞与</InputLabel>
                    <OutlinedInput
                      id="summer-bonus"
                      type="number"
                      value={data.summerBonus || ''}
                      onChange={handleBonusChange('summerBonus')}
                      endAdornment={
                        <InputAdornment position="end">
                          <Box sx={{ display: 'flex', flexDirection: 'column', mr: 1 }}>
                            <IconButton
                              size="small"
                              onClick={handleBonusIncrease('summerBonus')}
                              sx={{ p: 0.2, height: 20 }}
                            >
                              <KeyboardArrowUp fontSize="small" />
                            </IconButton>
                            <IconButton
                              size="small"
                              onClick={handleBonusDecrease('summerBonus')}
                              sx={{ p: 0.2, height: 20 }}
                            >
                              <KeyboardArrowDown fontSize="small" />
                            </IconButton>
                          </Box>
                          円
                        </InputAdornment>
                      }
                      label="夏期賞与"
                    />
                  </FormControl>
                  <FormControl sx={{ minWidth: 200, flex: 1 }} variant="outlined">
                    <InputLabel htmlFor="winter-bonus">冬期賞与</InputLabel>
                    <OutlinedInput
                      id="winter-bonus"
                      type="number"
                      value={data.winterBonus || ''}
                      onChange={handleBonusChange('winterBonus')}
                      endAdornment={
                        <InputAdornment position="end">
                          <Box sx={{ display: 'flex', flexDirection: 'column', mr: 1 }}>
                            <IconButton
                              size="small"
                              onClick={handleBonusIncrease('winterBonus')}
                              sx={{ p: 0.2, height: 20 }}
                            >
                              <KeyboardArrowUp fontSize="small" />
                            </IconButton>
                            <IconButton
                              size="small"
                              onClick={handleBonusDecrease('winterBonus')}
                              sx={{ p: 0.2, height: 20 }}
                            >
                              <KeyboardArrowDown fontSize="small" />
                            </IconButton>
                          </Box>
                          円
                        </InputAdornment>
                      }
                      label="冬期賞与"
                    />
                  </FormControl>
                </Box>
                <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
                  <FormControl sx={{ minWidth: 200, flex: 1 }} variant="outlined">
                    <InputLabel htmlFor="settlement-bonus">決算賞与</InputLabel>
                    <OutlinedInput
                      id="settlement-bonus"
                      type="number"
                      value={data.settlementBonus || ''}
                      onChange={handleBonusChange('settlementBonus')}
                      endAdornment={
                        <InputAdornment position="end">
                          <Box sx={{ display: 'flex', flexDirection: 'column', mr: 1 }}>
                            <IconButton
                              size="small"
                              onClick={handleBonusIncrease('settlementBonus')}
                              sx={{ p: 0.2, height: 20 }}
                            >
                              <KeyboardArrowUp fontSize="small" />
                            </IconButton>
                            <IconButton
                              size="small"
                              onClick={handleBonusDecrease('settlementBonus')}
                              sx={{ p: 0.2, height: 20 }}
                            >
                              <KeyboardArrowDown fontSize="small" />
                            </IconButton>
                          </Box>
                          円
                        </InputAdornment>
                      }
                      label="決算賞与"
                    />
                  </FormControl>
                  <FormControl sx={{ minWidth: 200, flex: 1 }} variant="outlined">
                    <InputLabel htmlFor="other-bonus">その他特別賞与</InputLabel>
                    <OutlinedInput
                      id="other-bonus"
                      type="number"
                      value={data.otherBonus || ''}
                      onChange={handleBonusChange('otherBonus')}
                      endAdornment={
                        <InputAdornment position="end">
                          <Box sx={{ display: 'flex', flexDirection: 'column', mr: 1 }}>
                            <IconButton
                              size="small"
                              onClick={handleBonusIncrease('otherBonus')}
                              sx={{ p: 0.2, height: 20 }}
                            >
                              <KeyboardArrowUp fontSize="small" />
                            </IconButton>
                            <IconButton
                              size="small"
                              onClick={handleBonusDecrease('otherBonus')}
                              sx={{ p: 0.2, height: 20 }}
                            >
                              <KeyboardArrowDown fontSize="small" />
                            </IconButton>
                          </Box>
                          円
                        </InputAdornment>
                      }
                      label="その他特別賞与"
                    />
                  </FormControl>
                </Box>
              </Box>
            </Box>
          </Paper>
        </Box>
      </Collapse>
    </Box>
  );
};

export default OptionsForm;